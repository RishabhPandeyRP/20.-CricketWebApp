// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  username       String        @unique
  email          String        @unique
  password       String
  role           Role          @default(USER)
  profilePicture String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Relation with auctions created by the user
  auctions       Auction[]     @relation("AuctionCreator")

  // Relation with auctions the user participates in
  participatedIn Auction[]     @relation("AuctionParticipants")

  // Relation for teams owned by the user
  ownedTeams     Team[]        @relation("TeamOwner")

  // Relation for notifications received by the user
  notifications  Notification[] @relation("UserNotifications")

  // Relation for actions performed by admin users
  adminActions   AdminAction[]  @relation("UserAdminActions")

  bids           Bid[]
}

enum Role {
  USER
  ADMIN
}

model Auction {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  budgetLimit Float
  status      AuctionStatus @default(SCHEDULED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // User who created the auction
  createdBy   User    @relation("AuctionCreator", fields: [createdById], references: [id])
  createdById Int
  
  // Users participating in the auction
  participants User[] @relation("AuctionParticipants")
  
  bids         Bid[]
  teams        Team[]
}

enum AuctionStatus {
  SCHEDULED
  LIVE
  COMPLETED
}

model Bid {
  id        Int      @id @default(autoincrement())
  amount    Float
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  
  auction   Auction  @relation(fields: [auctionId], references: [id])
  auctionId Int
  
  player    Player   @relation(fields: [playerId], references: [id])
  playerId  Int
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  
  auction   Auction  @relation(fields: [auctionId], references: [id])
  auctionId Int
  
  // User who owns the team
  owner     User     @relation("TeamOwner", fields: [ownerId], references: [id])
  ownerId   Int

  players   Player[]
}

model Player {
  id       Int     @id @default(autoincrement())
  name     String
  stats    Json?
  
  team     Team?   @relation(fields: [teamId], references: [id])
  teamId   Int?

  bids     Bid[]
}

model Notification {
  id        Int          @id @default(autoincrement())
  message   String
  status    NotificationStatus @default(UNREAD)
  createdAt DateTime     @default(now())
  
  // Relation to the user receiving the notification
  user      User         @relation("UserNotifications", fields: [userId], references: [id])
  userId    Int
}

enum NotificationStatus {
  UNREAD
  READ
}

model AdminAction {
  id          Int        @id @default(autoincrement())
  actionType  ActionType
  description String
  createdAt   DateTime   @default(now())
  
  // Relation to the admin user who performed the action
  performedBy User       @relation("UserAdminActions", fields: [adminId], references: [id])
  adminId     Int 
}

enum ActionType {
  MANAGE_USER
  MONITOR_AUCTION
  ACCESS_REPORT
}
